// Code generated by protoc-gen-gogo.
// source: commonpb/raft.proto
// DO NOT EDIT!

/*
	Package commonpb is a generated protocol buffer package.

	It is generated from these files:
		commonpb/raft.proto

	It has these top-level messages:
		Entry
		Snapshot
		ReconfRequest
		ReconfResponse
*/
package commonpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EntryType int32

const (
	EntryInternal EntryType = 0
	EntryNormal   EntryType = 1
	EntryReconf   EntryType = 2
)

var EntryType_name = map[int32]string{
	0: "EntryInternal",
	1: "EntryNormal",
	2: "EntryReconf",
}
var EntryType_value = map[string]int32{
	"EntryInternal": 0,
	"EntryNormal":   1,
	"EntryReconf":   2,
}

func (x EntryType) String() string {
	return proto.EnumName(EntryType_name, int32(x))
}
func (EntryType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaft, []int{0} }

type ReconfStatus int32

const (
	ReconfOK        ReconfStatus = 0
	ReconfTimeout   ReconfStatus = 1
	ReconfNotLeader ReconfStatus = 2
)

var ReconfStatus_name = map[int32]string{
	0: "ReconfOK",
	1: "ReconfTimeout",
	2: "ReconfNotLeader",
}
var ReconfStatus_value = map[string]int32{
	"ReconfOK":        0,
	"ReconfTimeout":   1,
	"ReconfNotLeader": 2,
}

func (x ReconfStatus) String() string {
	return proto.EnumName(ReconfStatus_name, int32(x))
}
func (ReconfStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaft, []int{1} }

type ReconfType int32

const (
	ReconfAdd    ReconfType = 0
	ReconfRemove ReconfType = 1
)

var ReconfType_name = map[int32]string{
	0: "ReconfAdd",
	1: "ReconfRemove",
}
var ReconfType_value = map[string]int32{
	"ReconfAdd":    0,
	"ReconfRemove": 1,
}

func (x ReconfType) String() string {
	return proto.EnumName(ReconfType_name, int32(x))
}
func (ReconfType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaft, []int{2} }

type Entry struct {
	Term      uint64    `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Index     uint64    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	EntryType EntryType `protobuf:"varint,3,opt,name=entryType,proto3,enum=commonpb.EntryType" json:"entryType,omitempty"`
	Data      []byte    `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptorRaft, []int{0} }

type Snapshot struct {
	LeaderID          uint64 `protobuf:"varint,1,opt,name=leaderID,proto3" json:"leaderID,omitempty"`
	Term              uint64 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	LastIncludedIndex uint64 `protobuf:"varint,3,opt,name=lastIncludedIndex,proto3" json:"lastIncludedIndex,omitempty"`
	LastIncludedTerm  uint64 `protobuf:"varint,4,opt,name=lastIncludedTerm,proto3" json:"lastIncludedTerm,omitempty"`
	Data              []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Snapshot) Reset()                    { *m = Snapshot{} }
func (m *Snapshot) String() string            { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()               {}
func (*Snapshot) Descriptor() ([]byte, []int) { return fileDescriptorRaft, []int{1} }

type ReconfRequest struct {
	ServerID   uint64     `protobuf:"varint,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	ReconfType ReconfType `protobuf:"varint,2,opt,name=reconfType,proto3,enum=commonpb.ReconfType" json:"reconfType,omitempty"`
}

func (m *ReconfRequest) Reset()                    { *m = ReconfRequest{} }
func (m *ReconfRequest) String() string            { return proto.CompactTextString(m) }
func (*ReconfRequest) ProtoMessage()               {}
func (*ReconfRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaft, []int{2} }

type ReconfResponse struct {
	Status     ReconfStatus `protobuf:"varint,1,opt,name=status,proto3,enum=commonpb.ReconfStatus" json:"status,omitempty"`
	LeaderHint string       `protobuf:"bytes,2,opt,name=leaderHint,proto3" json:"leaderHint,omitempty"`
}

func (m *ReconfResponse) Reset()                    { *m = ReconfResponse{} }
func (m *ReconfResponse) String() string            { return proto.CompactTextString(m) }
func (*ReconfResponse) ProtoMessage()               {}
func (*ReconfResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaft, []int{3} }

func init() {
	proto.RegisterType((*Entry)(nil), "commonpb.Entry")
	proto.RegisterType((*Snapshot)(nil), "commonpb.Snapshot")
	proto.RegisterType((*ReconfRequest)(nil), "commonpb.ReconfRequest")
	proto.RegisterType((*ReconfResponse)(nil), "commonpb.ReconfResponse")
	proto.RegisterEnum("commonpb.EntryType", EntryType_name, EntryType_value)
	proto.RegisterEnum("commonpb.ReconfStatus", ReconfStatus_name, ReconfStatus_value)
	proto.RegisterEnum("commonpb.ReconfType", ReconfType_name, ReconfType_value)
}
func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Term != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.Term))
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.Index))
	}
	if m.EntryType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.EntryType))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaft(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Snapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snapshot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LeaderID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.LeaderID))
	}
	if m.Term != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.Term))
	}
	if m.LastIncludedIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.LastIncludedIndex))
	}
	if m.LastIncludedTerm != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.LastIncludedTerm))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRaft(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *ReconfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReconfRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ServerID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.ServerID))
	}
	if m.ReconfType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.ReconfType))
	}
	return i, nil
}

func (m *ReconfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReconfResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaft(dAtA, i, uint64(m.Status))
	}
	if len(m.LeaderHint) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaft(dAtA, i, uint64(len(m.LeaderHint)))
		i += copy(dAtA[i:], m.LeaderHint)
	}
	return i, nil
}

func encodeFixed64Raft(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Raft(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRaft(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Entry) Size() (n int) {
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovRaft(uint64(m.Term))
	}
	if m.Index != 0 {
		n += 1 + sovRaft(uint64(m.Index))
	}
	if m.EntryType != 0 {
		n += 1 + sovRaft(uint64(m.EntryType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	return n
}

func (m *Snapshot) Size() (n int) {
	var l int
	_ = l
	if m.LeaderID != 0 {
		n += 1 + sovRaft(uint64(m.LeaderID))
	}
	if m.Term != 0 {
		n += 1 + sovRaft(uint64(m.Term))
	}
	if m.LastIncludedIndex != 0 {
		n += 1 + sovRaft(uint64(m.LastIncludedIndex))
	}
	if m.LastIncludedTerm != 0 {
		n += 1 + sovRaft(uint64(m.LastIncludedTerm))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	return n
}

func (m *ReconfRequest) Size() (n int) {
	var l int
	_ = l
	if m.ServerID != 0 {
		n += 1 + sovRaft(uint64(m.ServerID))
	}
	if m.ReconfType != 0 {
		n += 1 + sovRaft(uint64(m.ReconfType))
	}
	return n
}

func (m *ReconfResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovRaft(uint64(m.Status))
	}
	l = len(m.LeaderHint)
	if l > 0 {
		n += 1 + l + sovRaft(uint64(l))
	}
	return n
}

func sovRaft(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRaft(x uint64) (n int) {
	return sovRaft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryType", wireType)
			}
			m.EntryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryType |= (EntryType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Snapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderID", wireType)
			}
			m.LeaderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIncludedIndex", wireType)
			}
			m.LastIncludedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastIncludedIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIncludedTerm", wireType)
			}
			m.LastIncludedTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastIncludedTerm |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReconfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReconfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReconfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			m.ServerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReconfType", wireType)
			}
			m.ReconfType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReconfType |= (ReconfType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReconfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReconfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReconfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (ReconfStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderHint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderHint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRaft
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRaft
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRaft(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRaft = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaft   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("commonpb/raft.proto", fileDescriptorRaft) }

var fileDescriptorRaft = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0x51, 0x6e, 0xda, 0x40,
	0x14, 0xf4, 0x3a, 0x10, 0xc1, 0x2b, 0x90, 0xcd, 0x12, 0x55, 0x56, 0x3e, 0x2c, 0xc4, 0x17, 0x42,
	0x8d, 0x51, 0xd3, 0x1e, 0xa0, 0xad, 0x12, 0xa9, 0xa8, 0x55, 0x2a, 0x6d, 0x72, 0x80, 0x2e, 0x78,
	0x21, 0x48, 0xf6, 0xae, 0xbb, 0xbb, 0x8e, 0x92, 0x5b, 0xf4, 0x18, 0x3d, 0x4a, 0x3e, 0x73, 0x84,
	0x86, 0x5e, 0xa4, 0xf2, 0x33, 0x36, 0x56, 0xf2, 0xf7, 0x66, 0xde, 0xec, 0x9b, 0x61, 0x30, 0x0c,
	0x97, 0x3a, 0x4d, 0xb5, 0xca, 0x16, 0x33, 0x23, 0x56, 0x2e, 0xca, 0x8c, 0x76, 0x9a, 0x75, 0x2a,
	0xf2, 0xf4, 0x6c, 0xbd, 0x71, 0xb7, 0xf9, 0x22, 0x5a, 0xea, 0x74, 0xb6, 0xd6, 0x6b, 0x3d, 0x43,
	0xc1, 0x22, 0x5f, 0x21, 0x42, 0x80, 0x53, 0xf9, 0x70, 0x7c, 0x0f, 0xed, 0x4b, 0xe5, 0xcc, 0x03,
	0x63, 0xd0, 0x72, 0xd2, 0xa4, 0x01, 0x19, 0x91, 0x49, 0x8b, 0xe3, 0xcc, 0x4e, 0xa0, 0xbd, 0x51,
	0xb1, 0xbc, 0x0f, 0x7c, 0x24, 0x4b, 0xc0, 0xde, 0x43, 0x57, 0x16, 0x4f, 0x6e, 0x1e, 0x32, 0x19,
	0x1c, 0x8c, 0xc8, 0x64, 0x70, 0x3e, 0x8c, 0x2a, 0xff, 0xe8, 0xb2, 0x5a, 0xf1, 0xbd, 0xaa, 0x38,
	0x1e, 0x0b, 0x27, 0x82, 0xd6, 0x88, 0x4c, 0x7a, 0x1c, 0xe7, 0xf1, 0x1f, 0x02, 0x9d, 0x6b, 0x25,
	0x32, 0x7b, 0xab, 0x1d, 0x3b, 0x85, 0x4e, 0x22, 0x45, 0x2c, 0xcd, 0xfc, 0x62, 0x97, 0xa0, 0xc6,
	0x75, 0x32, 0xbf, 0x91, 0xec, 0x1d, 0x1c, 0x27, 0xc2, 0xba, 0xb9, 0x5a, 0x26, 0x79, 0x2c, 0xe3,
	0x39, 0xa6, 0x3c, 0x40, 0xc1, 0xeb, 0x05, 0x9b, 0x02, 0x6d, 0x92, 0x37, 0xc5, 0xb5, 0x16, 0x8a,
	0x5f, 0xf1, 0x75, 0xd4, 0x76, 0x23, 0xaa, 0x80, 0x3e, 0x97, 0x4b, 0xad, 0x56, 0x5c, 0xfe, 0xca,
	0xa5, 0xc5, 0xb8, 0x56, 0x9a, 0xbb, 0x66, 0xdc, 0x0a, 0xb3, 0x8f, 0x00, 0x06, 0xc5, 0xd8, 0x8f,
	0x8f, 0xfd, 0x9c, 0xec, 0xfb, 0xe1, 0xf5, 0x8e, 0x37, 0x74, 0xe3, 0x9f, 0x30, 0xa8, 0x2c, 0x6c,
	0xa6, 0x95, 0x95, 0x2c, 0x82, 0x43, 0xeb, 0x84, 0xcb, 0x2d, 0x3a, 0x0c, 0xce, 0xdf, 0xbe, 0xbc,
	0x71, 0x8d, 0x5b, 0xbe, 0x53, 0xb1, 0x10, 0xa0, 0xac, 0xec, 0xeb, 0x46, 0x39, 0xf4, 0xed, 0xf2,
	0x06, 0x33, 0xfd, 0x04, 0xdd, 0xfa, 0xbf, 0x61, 0xc7, 0xd0, 0x47, 0x30, 0x57, 0x4e, 0x1a, 0x25,
	0x12, 0xea, 0xb1, 0x23, 0x78, 0x83, 0xd4, 0x95, 0x36, 0xa9, 0x48, 0x28, 0xa9, 0x89, 0xd2, 0x8d,
	0xfa, 0xd3, 0x0b, 0xe8, 0x35, 0x9d, 0x59, 0x0f, 0x3a, 0x25, 0xfe, 0xf1, 0x8d, 0x7a, 0xc5, 0xc9,
	0xdd, 0x6f, 0xdb, 0xa4, 0x52, 0xe7, 0x8e, 0x12, 0x36, 0x84, 0xa3, 0x92, 0xba, 0xd2, 0xee, 0x3b,
	0x26, 0xa1, 0xfe, 0xf4, 0x0c, 0x60, 0xdf, 0x01, 0xeb, 0x43, 0xb7, 0x44, 0x9f, 0xe3, 0x98, 0x7a,
	0x8c, 0x56, 0x16, 0x5c, 0xa6, 0xfa, 0x4e, 0x52, 0xf2, 0x25, 0x78, 0x7c, 0x0e, 0xbd, 0xa7, 0xe7,
	0xd0, 0x7b, 0xdc, 0x86, 0xe4, 0x69, 0x1b, 0x92, 0xbf, 0xdb, 0x90, 0xfc, 0xfe, 0x17, 0x7a, 0x8b,
	0x43, 0xfc, 0x82, 0x3f, 0xfc, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x64, 0xab, 0xd4, 0x11, 0x03,
	0x00, 0x00,
}
